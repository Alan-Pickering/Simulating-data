%simBS_2x2_AOV.m
%
%version 2; 10.4.2020
%works for B-Ss 2x2 designs only
%@@@marks bits that are still to add for extra polish

%clear screen and variables
clc;
clear variables;

%set random number seed to a fixed value to ensure same random values each
%run of the pgm
myseed=2000; %this/these value(s) are arbitrary
rng(myseed);
%rand('seed', myseed);

disp('Matlab pgm: simBS_2x2_AOV.m; version 2 (10.4.2020)');
disp('*************************************************');
disp('This programme let''s you simulate a large number of 2x2 between-subjects datasets with known properties.');
disp('Please select the properties of the datasets by typing the required info + <Enter> in each case.');
disp(' ');
cellsize=0;
disp('The cell size is the number of simulated cases in each cell of the design; NOT the total sample size.');
while cellsize <10 || cellsize>500
    cellsize=input('What cell size do you want (10-500)? ');
end
nsims=0;
while nsims <1 || nsims>10000
    nsims=input('How many simulations do you want (1-10000)? ');
end
disp(' ');
disp('Next, info is needed on the effect sizes you would like.');
disp('Please express the effect sizes in terms of Cohen''s d.');
disp('This is the difference in the DV between two groups expressed in');
disp('terms of the common standard deviation for the DV in each group. For example:-');
disp('d= 0.2-0.4 represents the typical smaller effect sizes in psychology / social science.');
disp('d= 0.4-0.8 represent medium to large effect sizes');
disp('d >0.8 represents very large effect sizes not often found in psychology/ social science.');
cohend_A=-2;
disp('After you select d, the effect size for factor A will be added as +d/2 to group A=1; -d/2 to group A=2.');
while cohend_A <-1 || cohend_A>1
    cohend_A=input('What effect size (d) do you want for the main effect of factor A? (between -1 and +1) ');
end
cohend_B=-2;
disp('After you select d, the effect size for factor B will be added as +d/2 to group B=1; -d/2 to group B=2.');
while cohend_B <-1 || cohend_B>1
    cohend_B=input('What effect size (d) do you want for the main effect of factor B? (between -1 and +1) ');
end
cohend_int=-2;
disp('After you select d, the effect size for A*B interaction effect will be added as +d/2 -d/2 -d/2 +d/2 across cells A1B1 A1B2 A2B1 A2B2.');
while cohend_int <-1 || cohend_int>1
    cohend_int=input('What effect size (d) do you want for the A*B interaction effect? (between -1 and +1) ');
end
myalpha=0;
%myalpha=0.05; %the type 1 error rate (significance criterion)
while myalpha <=0 || myalpha>=1
    myalpha=input('What type 1 error rate (aka alpha or significance level) do you want? (0<alpha<1) ');
end

%@@@compute Cohen's f values for interaction=???
%you can seee how this next control parameter works by trying the different
%settings and look at the graphs for the interactins over the whole set of
%simulations
%don't change these next 2 lines
design_type=1; %1=between-subjects; 2= within-subjects; 3= mixed
int_type=1; %controls type of interaction 1= balanced cross-over (disordinal, with no main effects); 2= balanced ordinal (non-cross-over, with no main effects)

%set up simulated data array
%we need variables for the following
%i) sim_num
%ii) casenum within sim
if design_type==1
    totalnpersim=2*2*cellsize; %since 2x2 B-Ss
    %iii) factor A 1 or 2
    %iv) factor B 1 or 2
    %v) DV
    %so a total of columns, nc as below
    nc=5;
    pvals=zeros(nsims,3); %3 since 2 main effects plus 1 interaction
    tbl=cell(6,7); %set up to record the table output of ANOVAN
    MSE=zeros(nsims,1); %to store MSE values
    Fvals=zeros(nsims,3); %to store F valus for 3 efefcts
end
%now number of rows
nr=nsims*totalnpersim; 
%final the empty data array
mydata=zeros(nr,nc);

%in last data column add a standard normal variable, generated by randn command
mydata(:,nc)=randn(nr,1); %DV base value: expected values mean 0, sd =1

disp('Simulating ...');
%first set up the factor structure and number codes for factor levels
for j=1:nsims
    %selectors from big array for data in each simulation
    simstart=(j-1).*totalnpersim+1;
    simend=simstart -1 +totalnpersim;
    mydata(simstart:simend,1)=j; %simulation number
    mydata(simstart:simend,2)=1:totalnpersim; %case number within sim
    if design_type==1
        %2x2 B-Ss
        %first set up the factor structure
        facA1start=simstart;
        facA1end=simstart -1 + totalnpersim/2;
        facA1B1start=simstart;
        facA2B1start=facA1end+1;
        facB1blocklength=totalnpersim/4;
        mydata(facA1start:facA1end,3)=1; %factor A = 1
        mydata(facA1end+1:simend,3)=2;   %factor A = 2
        mydata(simstart:simend,4)=2; %set all factor B to be 2
        mydata(facA1B1start:facA1B1start+facB1blocklength-1,4)=1; %reset 1/4 of factor B code to be 1
        mydata(facA2B1start:facA2B1start+facB1blocklength-1,4)=1; %reset other 1/4 of factor B code to be 1
    end
end

%then add effects
if design_type==1
    %2x2 B-Ss
    facAfilter=mydata(:,3)==1; %has value 1 if fac A==1, 0 otherwise
    facBfilter=mydata(:,4)==1; %has value 1 if fac B==1, 0 otherwise
    %first the main effect of factor A
    mydata(facAfilter,nc)= mydata(facAfilter,nc)   + cohend_A/2;
    mydata(~facAfilter,nc)= mydata(~facAfilter,nc) - cohend_A/2;
    %first the main effect of factor A
    mydata(facBfilter,nc)= mydata(facBfilter,nc)   + cohend_B/2;
    mydata(~facBfilter,nc)= mydata(~facBfilter,nc) - cohend_B/2;
    %then add the effects of factor B
    %then add the effects for the interaction term
    if int_type==1
        %cross-over interaction, balanced disordinal with SMEs for both
        %factors and no main effects
        mydata((facAfilter & facBfilter),nc)= mydata((facAfilter & facBfilter),nc)     + cohend_int/2;
        mydata((facAfilter & ~facBfilter),nc)= mydata((facAfilter & ~facBfilter),nc)   - cohend_int/2;
        mydata((~facAfilter & facBfilter),nc)= mydata((~facAfilter & facBfilter),nc)   - cohend_int/2;
        mydata((~facAfilter & ~facBfilter),nc)= mydata((~facAfilter & ~facBfilter),nc) + cohend_int/2;
    elseif int_type==2
        %unbalanced ordinal which is equivalent to the xover interaction
        %plus a main effect of B which is same size as the interaction
        %this needs no main effect of B to be specified above
        %to create same sized interaction effect we need to double the
        %disturbances in the 
        mydata((facAfilter & facBfilter),nc)= mydata((facAfilter & facBfilter),nc)     + cohend_int;
        mydata((facAfilter & ~facBfilter),nc)= mydata((facAfilter & ~facBfilter),nc)   - cohend_int;
        %other 2 cells are not affect but commented lines below in for completeness
        %mydata((~facAfilter & facBfilter),nc)= mydata((~facAfilter & facBfilter),nc)   ;
        %mydata((~facAfilter & ~facBfilter),nc)= mydata((~facAfilter & ~facBfilter),nc) ;
    elseif int_type==3 %and 4,5
        %unbalanced disordinal which matches xover plus main effect of
        %A (cf type 2 above)
        %plus unbalanced ordinals a la lakens blog (2 types flipping factor A
        %and B roles over)
        %is there also a balanced ordinal (I don't think so)
        %@@@to be added
    end
end

%now do ANOVA
printit=100; %controls frequency of when message is displayed as simulations proceed
for j=1:nsims
    if mod(j,printit)==0
        disp(['Simulation #' num2str(j) ' is completed']);
    end

    %selectors from big array for data in each simulation
    simstart=(j-1).*totalnpersim+1;
    simend=simstart -1 +totalnpersim;

    if design_type==1
        %2x2 B-Ss
        %compute 2x2 ANOVA within each sim, using Matlab ANOVAN function
        %you can change the variable names in the next line; here they are
        %just A and B
        [pvals(j,:), tbl, stats]=anovan(mydata(simstart:simend,5),{mydata(simstart:simend,3),mydata(simstart:simend,4)},'alpha', myalpha, 'model','full','varnames', {'A','B'},'display','off');
        %store F values for each effect for each sim
        Fcell=tbl(2:4,6); %extracts the 3 Fvalues into a cell var
        Fvals(j,:)=cell2mat(Fcell); %converts the Fcell into a matrix and stores fro each sim;
        %store mse for each sim
        MSE(j)=stats.mse;
    end

end

disp(' ');

%key results over all simulations, 
%@@@maybe add main effect plots
mnA1B1all=mean(mydata((facAfilter & facBfilter),nc));
mnA1B2all=mean(mydata((facAfilter & ~facBfilter),nc));
mnA2B1all=mean(mydata((~facAfilter & facBfilter),nc));
mnA2B2all=mean(mydata((~facAfilter & ~facBfilter),nc));
figure;
plot([1 2], [mnA1B1all mnA2B1all], 'o-b', [1 2], [mnA1B2all mnA2B2all], 'x-r');
xlabel('Factor A levels');
ylabel('DV');
legend('Factor B, level 1', 'Factor B, level 2','Location','NorthEastOutside');
msg='Plot is averaged over all simulations';
title(msg);
%now sort out the figure axes for 2 levels of the A factor
%@@@ can add personalised factor lables
myfig=gcf;
myaxis=gca(myfig);
myaxis.XLim=[0.5 2.5];
myaxis.XTick=[1 2];
myaxis.XMinorGrid='off';
myaxis.XMinorTick='off';

disp('Across all simulations:-')
%calculation of cell expected effects based on main effects contributions
if design_type==1
    expA1B1 =  0.5*(cohend_A + cohend_B);
    expA1B2 =  0.5*(cohend_A - cohend_B);
    expA2B1 =  0.5*(-cohend_A + cohend_B);
    expA2B2 =  0.5*(-cohend_A - cohend_B);
    if int_type==1
        %update cell expected means based on interaction contributions
        expA1B1 =  expA1B1 + cohend_int/2;
        expA1B2 =  expA1B2 - cohend_int/2;
        expA2B1 =  expA2B1 - cohend_int/2;
        expA2B2 =  expA2B2 + cohend_int/2;
    elseif int_type==2
        %update cell expected means based on interaction contributions
        expA1B1 =  expA1B1 + cohend_int;
        expA1B2 =  expA1B2 - cohend_int;
        %no effect on other 2 cells of this type of interaction
    end
end
disp(['The mean of DV for cell A1B1 = ' num2str(mnA1B1all) ' vs. expected value = ' num2str(expA1B1)]);
disp(['The mean of DV for cell A1B2 = ' num2str(mnA1B2all) ' vs. expected value = ' num2str(expA1B2)]);
disp(['The mean of DV for cell A2B1 = ' num2str(mnA2B1all) ' vs. expected value = ' num2str(expA2B1)]);
disp(['The mean of DV for cell A2B2 = ' num2str(mnA2B2all) ' vs. expected value = ' num2str(expA2B2)]);

%compute power of effects, at level alpha
%count up the p values significant at level myalpha
termlab={'Main effect of A', 'Main effect of B', 'A*B Interaction'};
for j=1:3
    numsig=sum(pvals(:,j) < myalpha);
    disp(['The Monte Carlo estimated power of this simulation for the ' termlab{j} ' = ' num2str(numsig/nsims)]);
end

%plotting of results over all simulations goes here
%histogram of F for the interaction
figure;
histogram(Fvals(:,3)); %3 is the column with the interaction F in it
ylabel('Frequency');
xlabel('F value');
title('Results for the interaction effect');
%histogram for p value of interaction
figure;
histogram(pvals(:,3)); %3 is the column with the interaction F in it
ylabel('Frequency');
xlabel('p-value under H0');
title('Results for the interaction effect');

disp('Now, for the results of particular simulation(s) ...');
checkout=0;
while checkout==0

    %select and give details of a specific simulation
    whichsim=-1;
    while (whichsim<0 || whichsim>nsims)
        whichsim=input('Type number of simulation to see its results, followed by <Enter>; 0 to continue ');
    end
    if whichsim>0
        %first compute the means
        if design_type==1
            mnA1B1=mean(mydata((facAfilter & facBfilter & mydata(:,1)==whichsim),nc));
            mnA1B2=mean(mydata((facAfilter & ~facBfilter & mydata(:,1)==whichsim),nc));
            mnA2B1=mean(mydata((~facAfilter & facBfilter & mydata(:,1)==whichsim),nc));
            mnA2B2=mean(mydata((~facAfilter & ~facBfilter & mydata(:,1)==whichsim),nc));
            figure;
            %now the results of the ANOVA on that simulation
            %you can change the variable names in the next line; here they are
            %just A and B
            [singlep, singletbl, singlestats]=anovan(mydata(mydata(:,1)==whichsim,5),{mydata(mydata(:,1)==whichsim,3),mydata(mydata(:,1)==whichsim,4)},'alpha', myalpha, 'model','full','varnames', {'A','B'},'display','on');
            %now try to label Figure better here
            FigList2=allchild(groot);
            FigList2(1).Name=['2x2 ANOVA for simulation no. ' num2str(whichsim) ]; %works on latest open Figure which is 1 in the array
            %@@@might add multiple comparison tests here
        end
        %now a plot
        plot([1 2], [mnA1B1 mnA1B2], 'o-b', [1 2], [mnA1B2 mnA2B2], 'x-r');
        xlabel('Factor A levels');
        ylabel('DV');
        legend('Factor B, level 1', 'Factor B, level 2','Location','NorthEastOutside');
        msg=['Plot for simulation ' num2str(whichsim)];
        title(msg);
        %now sort out the figure axes for 2 levels of the A factor
        %@@@ can add personalised factor lables
        myfig=gcf;
        myaxis=gca(myfig);
        myaxis.XLim=[0.5 2.5];
        myaxis.XTick=[1 2];
        myaxis.XMinorGrid='off';
        myaxis.XMinorTick='off';
        whichsim=-1;
    elseif whichsim==0
        %no info given
        checkout=1;
    end

end

%saving data
wantsave=-1;
disp(' ');
disp('Data-saving options:-');
disp('0 do not save any data');
disp('1 save data from all simulations');
disp('2 save data from only one particular simulation');
while wantsave<0 ||wantsave >2
    wantsave=input('Type number for selection required, then <Enter> ');
end   
    
if wantsave ==2
    %select a specific simulation for saving
    whichsim2save=0;
    while (whichsim2save<1 || whichsim2save>nsims)
        whichsim2save=input('Type number of simulation you want to save, followed by <Enter> ');
    end
end

if wantsave==0
    disp('No simulated datasets were saved.');
elseif (wantsave==1 || wantsave ==2)
    %@@@use table and writetable to shorten this section
    %example below
    %t = table(group,meas(:,1),meas(:,2),meas(:,3),meas(:,4),'VariableNames',{'Gender','t1','t2','t3','t4'});
    %writetable(t,'testit.xlsx','Filetype','spreadsheet')
    %create variable labels
    if design_type==1
        vlabs={'sim_num','case_num','FactorA', 'FactorB', 'DV'};
    end
    %write the data into a cell array, alldata, with variable labels, vlabs, in the
    %first row and saved part of mydata in subsequent rows
    %we use a cell array so that we can save text labels along with numerical
    %data when we write to Excel file
    %set up empty cell string array, with the right dimensions
    if wantsave==1
        alldata=cell(nr+1,nc); %+1 for labels
        alldata(1,:)=vlabs; %add labels to first row
        data_as_cell=mat2cell(mydata,ones(1,nr),ones(1,nc)); %#ok<MMTC> %convert mydata to a cell array of same dimensions
        alldata(2:nr+1,:)=data_as_cell;
    elseif wantsave==2
        nrow_4onesim=totalnpersim; %
        alldata=cell(nrow_4onesim+1,nc); %+1 for labels
        alldata(1,:)=vlabs; %add labels to first row
        data_as_cell=mat2cell(mydata(mydata(:,1)==whichsim2save,:),ones(1,nrow_4onesim),ones(1,nc)); %#ok<MMTC> %convert mydata to a cell array of same dimensions
        alldata(2:nrow_4onesim+1,:)=data_as_cell;
    end
    
    %save mydata to Excel
    %first select file
    DataOutDirectory=pwd;  %@@@might put ths under user control at top
    if design_type==1
        defaultfilename='my2x2BSAnova.xlsx';
    end
    [myoutfilename, myoutpathname, filtindex ] = myfileselecta(defaultfilename, DataOutDirectory, 'save');
    
    %now save fitting data to selected file, if we chose a filename
    if filtindex==1
        disp('Saving data ...');
        xlswrite([myoutpathname myoutfilename],alldata); %myoutpathname ends in \ so no need to add \ between path and filenames
    else
        disp('No simulated datasets were saved.');
    end
end

%end of programme; function follows

function [filename, pathname, filterindex ] = myfileselecta(default_file, startpath, in_or_out)
    %this just selects a file

    cd(startpath);

    filterindex=0;
    while filterindex==0
    
        if strcmp(in_or_out,'save')
            [filename, pathname, filterindex] = uiputfile( '*.xlsx',  'Select File for Saving Simulated Data', default_file);
        elseif strcmp(in_or_out,'read')
            [filename, pathname, filterindex] = uigetfile( '*.xlsx',  'Select File for Saving Simulated Data', default_file);
        end
        
        if filterindex==0
            menu('You did not select a filename','ok');
            filterindex=2;
        end
    
    end

end